{"ast":null,"code":"import _objectSpread from \"/Users/mac/crwn-clothing-breaker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/auth';\nconst config = {\n  apiKey: \"AIzaSyBruDaIHlZ_49_yIEWYPPF3hY4oPepwGv4\",\n  authDomain: \"crwn-dem.firebaseapp.com\",\n  projectId: \"crwn-dem\",\n  storageBucket: \"crwn-dem.appspot.com\",\n  messagingSenderId: \"292125472552\",\n  appId: \"1:292125472552:web:00bf7b676f99b68330821d\",\n  measurementId: \"G-HBTWMGP2CG\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(\"user/\".concat(userAuth.uid));\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const displayName = userAuth.displayName,\n          email = userAuth.email;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set(_objectSpread({\n        displayName,\n        email,\n        createdAt\n      }, additionalData));\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/mac/crwn-clothing-breaker/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,qBAArB;AACA,OAAO,2BAAP;AACA,OAAO,sBAAP;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,0BAFC;AAGbC,EAAAA,SAAS,EAAE,UAHE;AAIbC,EAAAA,aAAa,EAAE,sBAJF;AAKbC,EAAAA,iBAAiB,EAAE,cALN;AAMbC,EAAAA,KAAK,EAAE,2CANM;AAObC,EAAAA,aAAa,EAAE;AAPF,CAAf;AAUA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAG,CAACD,QAAJ,EAAc;AAEd,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,gBAAsBJ,QAAQ,CAACK,GAA/B,EAAhB;AAEA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AAEA,MAAG,CAACD,QAAQ,CAACE,MAAb,EAAqB;AAAA,UACXC,WADW,GACYT,QADZ,CACXS,WADW;AAAA,UACEC,KADF,GACYV,QADZ,CACEU,KADF;AAEnB,UAAMC,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAG;AACD,YAAMV,OAAO,CAACW,GAAR;AACJJ,QAAAA,WADI;AAEJC,QAAAA,KAFI;AAGJC,QAAAA;AAHI,SAIDV,cAJC,EAAN;AAMD,KAPD,CAQA,OAAMa,KAAN,EAAY;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AAED;AAEF;;AAED,SAAOf,OAAP;AACD,CA3BM;AA6BPZ,QAAQ,CAAC4B,aAAT,CAAuB3B,MAAvB;AAEA,OAAO,MAAM4B,IAAI,GAAG7B,QAAQ,CAAC6B,IAAT,EAAb;AACP,OAAO,MAAMhB,SAAS,GAAGb,QAAQ,CAACa,SAAT,EAAlB;AAEP,MAAMiB,QAAQ,GAAG,IAAI9B,QAAQ,CAAC6B,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAACC,EAAAA,MAAM,EAAE;AAAT,CAA7B;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AACP,eAAe9B,QAAf","sourcesContent":["import firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/auth';\n\nconst config = {\n  apiKey: \"AIzaSyBruDaIHlZ_49_yIEWYPPF3hY4oPepwGv4\",\n  authDomain: \"crwn-dem.firebaseapp.com\",\n  projectId: \"crwn-dem\",\n  storageBucket: \"crwn-dem.appspot.com\",\n  messagingSenderId: \"292125472552\",\n  appId: \"1:292125472552:web:00bf7b676f99b68330821d\",\n  measurementId: \"G-HBTWMGP2CG\"\n};\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if(!userAuth) return;\n\n  const userRef = firestore.doc(`user/${userAuth.uid}`);\n\n  const snapShot = await userRef.get();\n\n  if(!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try{\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      })\n    }\n    catch(error){\n      console.log('error creating user', error.message)\n\n    }\n\n  }\n\n  return userRef;\n};\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({prompt: 'select_account' });\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;\n\n\n"]},"metadata":{},"sourceType":"module"}